/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Felix
 */
import java.awt.event.KeyEvent;
import java.sql.*;
import java.util.Vector;
import javax.swing.*;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.table.*;
public class TampilkanReminder extends javax.swing.JFrame {
    /**
     * Creates new form TampilkanReminder
     */
    private String sql;
    public TampilkanReminder() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblNamaUser = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtabReminderPengeluaran = new javax.swing.JTable();
        btnEditReminderPemasukan = new javax.swing.JButton();
        btnDeleteReminderPemasukan = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtabReminderPemasukan = new javax.swing.JTable();
        btnEditReminderPengeluaran = new javax.swing.JButton();
        btnDeleteReminderPengeluaran = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        tfSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        menuBar1 = new javax.swing.JMenuBar();
        jMenuManajemen = new javax.swing.JMenu();
        menuItemTambahPemasukan = new javax.swing.JMenuItem();
        menuItemTambahPengeluaran = new javax.swing.JMenuItem();
        menuItemTambahReminderPemasukan = new javax.swing.JMenuItem();
        menuItemTambahReminderPengeluaran = new javax.swing.JMenuItem();
        jMenuTampilkan = new javax.swing.JMenu();
        menuItemHistory = new javax.swing.JMenuItem();
        menuItemReport = new javax.swing.JMenuItem();
        jMenuUser = new javax.swing.JMenu();
        menuItemBuatUserBaru = new javax.swing.JMenuItem();
        menuItemGantiPassword = new javax.swing.JMenuItem();
        menuItemLogout = new javax.swing.JMenuItem();
        jMenuAbout = new javax.swing.JMenu();
        menuItemDeveloper = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Student Money Manager - Beranda");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel1.setText("STUDENT MONEY MANAGER");

        lblNamaUser.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblNamaUser.setText("Welcome, ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setText("Reminder Pemasukan");

        jtabReminderPengeluaran.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Jenis", "Ingatkan mulai (hari/tgl)", "Deadline (hari/tgl)", "Keterangan", "Enabled"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtabReminderPengeluaran);

        btnEditReminderPemasukan.setText("Edit");
        btnEditReminderPemasukan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditReminderPemasukanActionPerformed(evt);
            }
        });

        btnDeleteReminderPemasukan.setText("Delete");
        btnDeleteReminderPemasukan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteReminderPemasukanActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setText("Reminder Pengeluaran");

        jtabReminderPemasukan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Jenis", "Hari/Tanggal", "Keterangan", "Enabled"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtabReminderPemasukan);

        btnEditReminderPengeluaran.setText("Edit");
        btnEditReminderPengeluaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditReminderPengeluaranActionPerformed(evt);
            }
        });

        btnDeleteReminderPengeluaran.setText("Delete");
        btnDeleteReminderPengeluaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteReminderPengeluaranActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        tfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfSearchKeyPressed(evt);
            }
        });

        btnSearch.setText("GO!");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Search:");

        jMenuManajemen.setText("Manajemen");

        menuItemTambahPemasukan.setText("Tambah Pemasukan");
        menuItemTambahPemasukan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemTambahPemasukanActionPerformed(evt);
            }
        });
        jMenuManajemen.add(menuItemTambahPemasukan);

        menuItemTambahPengeluaran.setText("Tambah Pengeluaran");
        menuItemTambahPengeluaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemTambahPengeluaranActionPerformed(evt);
            }
        });
        jMenuManajemen.add(menuItemTambahPengeluaran);

        menuItemTambahReminderPemasukan.setText("Tambah Reminder Pemasukan");
        menuItemTambahReminderPemasukan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemTambahReminderPemasukanActionPerformed(evt);
            }
        });
        jMenuManajemen.add(menuItemTambahReminderPemasukan);

        menuItemTambahReminderPengeluaran.setText("Tambah Reminder Pengeluaran");
        menuItemTambahReminderPengeluaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemTambahReminderPengeluaranActionPerformed(evt);
            }
        });
        jMenuManajemen.add(menuItemTambahReminderPengeluaran);

        menuBar1.add(jMenuManajemen);

        jMenuTampilkan.setText("Tampilkan");

        menuItemHistory.setText("History");
        menuItemHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemHistoryActionPerformed(evt);
            }
        });
        jMenuTampilkan.add(menuItemHistory);

        menuItemReport.setText("Report");
        menuItemReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemReportActionPerformed(evt);
            }
        });
        jMenuTampilkan.add(menuItemReport);

        menuBar1.add(jMenuTampilkan);

        jMenuUser.setText("User");

        menuItemBuatUserBaru.setText("Buat user baru");
        menuItemBuatUserBaru.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemBuatUserBaruActionPerformed(evt);
            }
        });
        jMenuUser.add(menuItemBuatUserBaru);

        menuItemGantiPassword.setText("Ganti password");
        menuItemGantiPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemGantiPasswordActionPerformed(evt);
            }
        });
        jMenuUser.add(menuItemGantiPassword);

        menuItemLogout.setText("Logout");
        menuItemLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLogoutActionPerformed(evt);
            }
        });
        jMenuUser.add(menuItemLogout);

        menuBar1.add(jMenuUser);

        jMenuAbout.setText("About");

        menuItemDeveloper.setText("Developer");
        jMenuAbout.add(menuItemDeveloper);

        menuBar1.add(jMenuAbout);

        setJMenuBar(menuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnEditReminderPemasukan)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteReminderPemasukan))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRefresh))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnSearch)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnEditReminderPengeluaran)
                        .addGap(18, 18, 18)
                        .addComponent(btnDeleteReminderPengeluaran)))
                .addContainerGap(29, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNamaUser)
                    .addComponent(jLabel1))
                .addGap(190, 190, 190))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNamaUser)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(btnRefresh))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditReminderPemasukan)
                    .addComponent(btnDeleteReminderPemasukan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditReminderPengeluaran)
                    .addComponent(btnDeleteReminderPengeluaran))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void loadReminderPemasukan(String keyword,int option){
        if(option==1)
            sql="SELECT rp.id_reminder_pemasukan,rp.id_kategori_reminder,kr.kategori,rp.id_hari,rp.tanggal,rp.keterangan,rp.enabled FROM reminder_pemasukan rp,kategori_reminder kr WHERE rp.id_kategori_reminder=kr.id_kategori_reminder AND id_user="+ModuleDB.idUser;
        else if(option==2)
            sql="SELECT rp.id_reminder_pemasukan,rp.id_kategori_reminder,kr.kategori,rp.id_hari,rp.tanggal,rp.keterangan,rp.enabled FROM reminder_pemasukan rp,kategori_reminder kr WHERE rp.id_kategori_reminder=kr.id_kategori_reminder AND id_user="+ModuleDB.idUser+" AND rp.keterangan LIKE '%"+keyword+"%'";
        int idKategoriReminder;
        int idHari;
        int statusEnabled;
        try{
            Connection con=ModuleDB.connectDB();
            Statement stmt=con.createStatement();
            ResultSet result=stmt.executeQuery(sql);
            DefaultTableModel model=(DefaultTableModel)jtabReminderPemasukan.getModel();
            model.setRowCount(0);
            while(result.next()){
                idKategoriReminder=result.getInt("id_kategori_reminder");
                Vector row=new Vector();
                row.add(result.getInt("id_reminder_pemasukan"));
                row.add(result.getString("kategori"));
                if(idKategoriReminder==2){
                    idHari=result.getInt("id_hari");
                    if(idHari==1)
                        row.add("Senin");
                    else if(idHari==2)
                        row.add("Selasa");
                    else if(idHari==3)
                        row.add("Rabu");
                    else if(idHari==4)
                        row.add("Kamis");
                    else if(idHari==5)
                        row.add("Jumat");
                    else if(idHari==6)
                        row.add("Sabtu");
                    else if(idHari==7)
                        row.add("Minggu");
                }
                else if(idKategoriReminder==3)
                    row.add(result.getInt("tanggal"));
                row.add(result.getString("keterangan"));
                statusEnabled=result.getInt("enabled");
                if(statusEnabled==0)
                    row.add("No");
                else if(statusEnabled==1)
                    row.add("Yes");
                model.addRow(row);
            }
            con.close();
            jtabReminderPemasukan.setModel(model);
        }
        catch(SQLException e){
            showMessageDialog(null,e.getMessage());
        }
    }
    
    public void loadReminderPengeluaran(String keyword,int option){
        if(option==1)
            sql="SELECT rp.id_reminder_pengeluaran,rp.id_kategori_reminder,kr.kategori,strftime('%d',rp.tanggal_notifikasi_sekali) AS 'tgl_notif',strftime('%m',rp.tanggal_notifikasi_sekali) AS 'bln_notif',strftime('%Y',rp.tanggal_notifikasi_sekali) AS 'thn_notif',rp.id_hari_notifikasi_mingguan,rp.tanggal_notifikasi_bulanan,strftime('%d',rp.tanggal_deadline_sekali) AS 'tgl_deadline',strftime('%m',rp.tanggal_deadline_sekali) AS 'bln_deadline',strftime('%Y',rp.tanggal_deadline_sekali) AS 'thn_deadline',rp.id_hari_deadline_mingguan,rp.tanggal_deadline_bulanan,rp.keterangan,rp.enabled FROM reminder_pengeluaran rp,kategori_reminder kr WHERE rp.id_kategori_reminder=kr.id_kategori_reminder AND id_user="+ModuleDB.idUser;
        else if(option==2)
            sql="SELECT rp.id_reminder_pengeluaran,rp.id_kategori_reminder,kr.kategori,strftime('%d',rp.tanggal_notifikasi_sekali) AS 'tgl_notif',strftime('%m',rp.tanggal_notifikasi_sekali) AS 'bln_notif',strftime('%Y',rp.tanggal_notifikasi_sekali) AS 'thn_notif',rp.id_hari_notifikasi_mingguan,rp.tanggal_notifikasi_bulanan,strftime('%d',rp.tanggal_deadline_sekali) AS 'tgl_deadline',strftime('%m',rp.tanggal_deadline_sekali) AS 'bln_deadline',strftime('%Y',rp.tanggal_deadline_sekali) AS 'thn_deadline',rp.id_hari_deadline_mingguan,rp.tanggal_deadline_bulanan,rp.keterangan,rp.enabled FROM reminder_pengeluaran rp,kategori_reminder kr WHERE rp.id_kategori_reminder=kr.id_kategori_reminder AND id_user="+ModuleDB.idUser+" AND rp.keterangan LIKE '%"+keyword+"%'";
        int idKategoriReminder;
        int statusEnabled;
        try{
            Connection con=ModuleDB.connectDB();
            Statement stmt=con.createStatement();
            ResultSet result=stmt.executeQuery(sql);
            DefaultTableModel model=(DefaultTableModel)jtabReminderPengeluaran.getModel();
            model.setRowCount(0);
            while(result.next()){
                idKategoriReminder=result.getInt("id_kategori_reminder");
                Vector row=new Vector();
                row.add(result.getInt("id_reminder_pengeluaran"));
                row.add(result.getString("kategori"));
                if(idKategoriReminder==1){
                    String tglNotif=result.getString("tgl_notif");
                    String blnNotif=result.getString("bln_notif");
                    String thnNotif=result.getString("thn_notif");
                    String tglNotifikasiLengkap=tglNotif+"-"+blnNotif+"-"+thnNotif;
                    String tglDeadline=result.getString("tgl_deadline");
                    String blnDeadline=result.getString("bln_deadline");
                    String thnDeadline=result.getString("thn_deadline");
                    String tglDeadlineLengkap=tglDeadline+"-"+blnDeadline+"-"+thnDeadline;
                    row.add(tglNotifikasiLengkap);
                    row.add(tglDeadlineLengkap);
                }
                else if(idKategoriReminder==2){
                    int idHariIngatkan=result.getInt("id_hari_notifikasi_mingguan");
                    int idHariDeadline=result.getInt("id_hari_deadline_mingguan");
                    if(idHariIngatkan==1)
                        row.add("Senin");
                    else if(idHariIngatkan==2)
                        row.add("Selasa");
                    else if(idHariIngatkan==3)
                        row.add("Rabu");
                    else if(idHariIngatkan==4)
                        row.add("Kamis");
                    else if(idHariIngatkan==5)
                        row.add("Jumat");
                    else if(idHariIngatkan==6)
                        row.add("Sabtu");
                    else if(idHariIngatkan==7)
                        row.add("Minggu");
                    if(idHariDeadline==1)
                        row.add("Senin");
                    else if(idHariDeadline==2)
                        row.add("Selasa");
                    else if(idHariDeadline==3)
                        row.add("Rabu");
                    else if(idHariDeadline==4)
                        row.add("Kamis");
                    else if(idHariDeadline==5)
                        row.add("Jumat");
                    else if(idHariDeadline==6)
                        row.add("Sabtu");
                    else if(idHariDeadline==7)
                        row.add("Minggu");
                }
                else if(idKategoriReminder==3){
                    row.add(result.getString("tanggal_notifikasi_bulanan"));
                    row.add(result.getString("tanggal_deadline_bulanan"));
                }
                row.add(result.getString("keterangan"));
                statusEnabled=result.getInt("enabled");
                if(statusEnabled==0)
                    row.add("No");
                else if(statusEnabled==1)
                    row.add("Yes");
                model.addRow(row);
            }
            con.close();
            jtabReminderPengeluaran.setModel(model);
        }
        catch(SQLException e){
            showMessageDialog(null,e.getMessage());
        }
    }
    
    private void setJTabReminderPemasukanColumnWidth(){
        jtabReminderPemasukan.getColumnModel().getColumn(0).setPreferredWidth(10);
        jtabReminderPemasukan.getColumnModel().getColumn(1).setPreferredWidth(50);
        jtabReminderPemasukan.getColumnModel().getColumn(2).setPreferredWidth(30);
        jtabReminderPemasukan.getColumnModel().getColumn(3).setPreferredWidth(180);
        jtabReminderPemasukan.getColumnModel().getColumn(4).setPreferredWidth(12);
    }
    
    private void setJTabReminderPengeluaranColumnWidth(){
        jtabReminderPengeluaran.getColumnModel().getColumn(0).setPreferredWidth(10);
        jtabReminderPengeluaran.getColumnModel().getColumn(1).setPreferredWidth(50);
        jtabReminderPengeluaran.getColumnModel().getColumn(2).setPreferredWidth(80);
        jtabReminderPengeluaran.getColumnModel().getColumn(3).setPreferredWidth(60);
        jtabReminderPengeluaran.getColumnModel().getColumn(4).setPreferredWidth(150);
        jtabReminderPengeluaran.getColumnModel().getColumn(5).setPreferredWidth(12);
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.setLocationRelativeTo(null);
        lblNamaUser.setText("Welcome, "+ModuleDB.nama);
        setJTabReminderPemasukanColumnWidth();
        setJTabReminderPengeluaranColumnWidth();
        loadReminderPemasukan(null,1);
        loadReminderPengeluaran(null,1);
    }//GEN-LAST:event_formWindowOpened

    private void menuItemBuatUserBaruActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemBuatUserBaruActionPerformed
        BuatUserBaru formBuatUserBaru=new BuatUserBaru();
        formBuatUserBaru.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        formBuatUserBaru.setVisible(true);
    }//GEN-LAST:event_menuItemBuatUserBaruActionPerformed

    private void menuItemTambahPemasukanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemTambahPemasukanActionPerformed
        TambahPemasukan formTambahPemasukan=new TambahPemasukan();
        formTambahPemasukan.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        formTambahPemasukan.setVisible(true);
    }//GEN-LAST:event_menuItemTambahPemasukanActionPerformed

    private void menuItemTambahPengeluaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemTambahPengeluaranActionPerformed
        TambahPengeluaran formTambahPengeluaran=new TambahPengeluaran();
        formTambahPengeluaran.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        formTambahPengeluaran.setVisible(true);
    }//GEN-LAST:event_menuItemTambahPengeluaranActionPerformed

    private void menuItemHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemHistoryActionPerformed
        History formHistory=new History();
        formHistory.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        formHistory.setVisible(true);
    }//GEN-LAST:event_menuItemHistoryActionPerformed

    private void menuItemGantiPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemGantiPasswordActionPerformed
        GantiPassword formGantiPassword=new GantiPassword();
        formGantiPassword.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        formGantiPassword.setVisible(true);
    }//GEN-LAST:event_menuItemGantiPasswordActionPerformed

    private void menuItemReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemReportActionPerformed
        Report formReport=new Report();
        formReport.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        formReport.setVisible(true);
    }//GEN-LAST:event_menuItemReportActionPerformed

    private void menuItemLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLogoutActionPerformed
        ModuleDB.idUser=0;
        ModuleDB.nama=null;
        ModuleDB.password=null;
        ModuleDB.username=null;
        new Login().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menuItemLogoutActionPerformed

    private void menuItemTambahReminderPengeluaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemTambahReminderPengeluaranActionPerformed
        TambahReminderPengeluaran formTambahReminderPengeluaran=new TambahReminderPengeluaran();
        formTambahReminderPengeluaran.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        formTambahReminderPengeluaran.setVisible(true);
    }//GEN-LAST:event_menuItemTambahReminderPengeluaranActionPerformed

    private void menuItemTambahReminderPemasukanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemTambahReminderPemasukanActionPerformed
        TambahReminderPemasukan formTambahReminderPemasukan=new TambahReminderPemasukan();
        formTambahReminderPemasukan.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        formTambahReminderPemasukan.setVisible(true);
    }//GEN-LAST:event_menuItemTambahReminderPemasukanActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        loadReminderPemasukan(null,1);
        loadReminderPengeluaran(null,1);
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnDeleteReminderPemasukanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteReminderPemasukanActionPerformed
        int dialogResult=JOptionPane.showOptionDialog(null,"Apakah anda yakin akan menghapus item reminder pemasukan ini?","Konfirmasi Hapus Reminder Pemasukan",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,null,null);
        if(dialogResult==JOptionPane.YES_OPTION){
            int rowIdx=jtabReminderPemasukan.getSelectedRow();
            int idReminderPemasukan=Integer.parseInt(jtabReminderPemasukan.getValueAt(rowIdx,0).toString());
            sql="DELETE FROM reminder_pemasukan WHERE id_reminder_pemasukan="+idReminderPemasukan;
            try{
                Connection con=ModuleDB.connectDB();
                Statement stmt=con.createStatement();
                stmt.executeUpdate(sql);
                showMessageDialog(null,"Item reminder pemasukan berhasil dihapus!");
                loadReminderPemasukan(null,1);
            }
            catch(SQLException e){
                showMessageDialog(null,e.getMessage());
            }
        }
    }//GEN-LAST:event_btnDeleteReminderPemasukanActionPerformed

    private void btnDeleteReminderPengeluaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteReminderPengeluaranActionPerformed
        int dialogResult=JOptionPane.showOptionDialog(null,"Apakah anda yakin akan menghapus item reminder pengeluaran ini?","Konfirmasi Hapus Reminder Pengeluaran",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,null,null);
        if(dialogResult==JOptionPane.YES_OPTION){
            int rowIdx=jtabReminderPengeluaran.getSelectedRow();
            int idReminderPengeluaran=Integer.parseInt(jtabReminderPengeluaran.getValueAt(rowIdx,0).toString());
            sql="DELETE FROM reminder_pengeluaran WHERE id_reminder_pengeluaran="+idReminderPengeluaran;
            try{
                Connection con=ModuleDB.connectDB();
                Statement stmt=con.createStatement();
                stmt.executeUpdate(sql);
                showMessageDialog(null,"Item reminder pengeluaran berhasil dihapus!");
                loadReminderPengeluaran(null,1);
            }
            catch(SQLException e){
                showMessageDialog(null,e.getMessage());
            }
        }
    }//GEN-LAST:event_btnDeleteReminderPengeluaranActionPerformed

    private void btnEditReminderPemasukanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditReminderPemasukanActionPerformed
        int rowIdx=jtabReminderPemasukan.getSelectedRow();
        int idReminderPemasukan=Integer.parseInt(jtabReminderPemasukan.getValueAt(rowIdx,0).toString());
        String jenisReminder=jtabReminderPemasukan.getValueAt(rowIdx,1).toString();
        String hariTanggal=jtabReminderPemasukan.getValueAt(rowIdx,2).toString();
        String keterangan=jtabReminderPemasukan.getValueAt(rowIdx,3).toString();
        String statusEnabled=jtabReminderPemasukan.getValueAt(rowIdx,4).toString();
        EditReminderPemasukan formEditReminderPemasukan=new EditReminderPemasukan(this,idReminderPemasukan,jenisReminder,hariTanggal,keterangan,statusEnabled);
        formEditReminderPemasukan.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        formEditReminderPemasukan.setVisible(true);
    }//GEN-LAST:event_btnEditReminderPemasukanActionPerformed

    private void btnEditReminderPengeluaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditReminderPengeluaranActionPerformed
        int rowIdx=jtabReminderPengeluaran.getSelectedRow();
        int idReminderPengeluaran=Integer.parseInt(jtabReminderPengeluaran.getValueAt(rowIdx,0).toString());
        String jenisReminder=jtabReminderPengeluaran.getValueAt(rowIdx,1).toString();
        String hariTanggalIngatkan=jtabReminderPengeluaran.getValueAt(rowIdx,2).toString();
        String hariTanggalDeadline=jtabReminderPengeluaran.getValueAt(rowIdx,3).toString();
        String keterangan=jtabReminderPengeluaran.getValueAt(rowIdx,4).toString();
        String statusEnabled=jtabReminderPengeluaran.getValueAt(rowIdx,5).toString();
        EditReminderPengeluaran formEditReminderPengeluaran=new EditReminderPengeluaran(this,idReminderPengeluaran,jenisReminder,hariTanggalIngatkan,hariTanggalDeadline,keterangan,statusEnabled);
        formEditReminderPengeluaran.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        formEditReminderPengeluaran.setVisible(true);
    }//GEN-LAST:event_btnEditReminderPengeluaranActionPerformed
    
    private void tfSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSearchKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            String keyword=tfSearch.getText();
            loadReminderPemasukan(keyword,2);
            loadReminderPengeluaran(keyword,2);
        }
    }//GEN-LAST:event_tfSearchKeyPressed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String keyword=tfSearch.getText();
        loadReminderPemasukan(keyword,2);
        loadReminderPengeluaran(keyword,2);
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Beranda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Beranda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Beranda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Beranda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Beranda().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteReminderPemasukan;
    private javax.swing.JButton btnDeleteReminderPengeluaran;
    private javax.swing.JButton btnEditReminderPemasukan;
    private javax.swing.JButton btnEditReminderPengeluaran;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenuAbout;
    private javax.swing.JMenu jMenuManajemen;
    private javax.swing.JMenu jMenuTampilkan;
    private javax.swing.JMenu jMenuUser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jtabReminderPemasukan;
    private javax.swing.JTable jtabReminderPengeluaran;
    private javax.swing.JLabel lblNamaUser;
    private javax.swing.JMenuBar menuBar1;
    private javax.swing.JMenuItem menuItemBuatUserBaru;
    private javax.swing.JMenuItem menuItemDeveloper;
    private javax.swing.JMenuItem menuItemGantiPassword;
    private javax.swing.JMenuItem menuItemHistory;
    private javax.swing.JMenuItem menuItemLogout;
    private javax.swing.JMenuItem menuItemReport;
    private javax.swing.JMenuItem menuItemTambahPemasukan;
    private javax.swing.JMenuItem menuItemTambahPengeluaran;
    private javax.swing.JMenuItem menuItemTambahReminderPemasukan;
    private javax.swing.JMenuItem menuItemTambahReminderPengeluaran;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
}
